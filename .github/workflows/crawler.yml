name: Baidu Hot News Crawler

on:
  schedule:
    - cron: "0 */6 * * *"
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  crawl:
    runs-on: ubuntu-22.04
    timeout-minutes: 30

    env:
      TZ: Asia/Shanghai
      PYTHONUNBUFFERED: 1
      MAX_RETRY: 3
      EDGE_DRIVER_URL: "https://msedgedriver.azureedge.net"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: 'pip'
          cache-dependency-path: 'requirements.txt'

      - name: Install system dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y \
            libnss3 libxss1 libasound2 libgbm1 \
            unzip curl gnupg ca-certificates \
            fonts-noto-cjk fonts-wqy-microhei
          sudo apt-get clean
          sudo rm -rf /var/lib/apt/lists/*

      - name: Install Python packages
        run: |
          python -m pip install --upgrade pip
          pip install --no-cache-dir -r requirements.txt
          pip list

      # ➕ WebDriver 缓存：先检查是否存在对应版本缓存
      - name: Cache Edge WebDriver
        id: cache-edgedriver
        uses: actions/cache@v3
        with:
          path: edgedriver_cache/
          key: edgedriver-${{ env.EDGE_VERSION }}

      - name: Install Edge and WebDriver
        timeout-minutes: 10
        run: |
          # 安装 Edge 浏览器
          echo "=== Installing Microsoft Edge ==="
          for i in $(seq 1 $MAX_RETRY); do
            sudo rm -f /usr/share/keyrings/microsoft-edge.gpg
            sudo rm -f /etc/apt/sources.list.d/microsoft-edge.list
            curl -fsSL https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor | sudo tee /usr/share/keyrings/microsoft-edge.gpg >/dev/null
            echo "deb [arch=amd64 signed-by=/usr/share/keyrings/microsoft-edge.gpg] https://packages.microsoft.com/repos/edge stable main" | sudo tee /etc/apt/sources.list.d/microsoft-edge.list
            sudo apt-get update -y
            sudo apt-get install -y microsoft-edge-stable

            if command -v microsoft-edge >/dev/null; then
              break
            else
              echo "Edge install failed, retrying..."
              sleep 30
              [ $i -eq $MAX_RETRY ] && exit 1
            fi
          done

          EDGE_FULL_VERSION=$(microsoft-edge --version | awk '{print $3}')
          echo "EDGE_VERSION=${EDGE_FULL_VERSION%.*}" >> $GITHUB_ENV
          echo "Installed Edge version: $EDGE_FULL_VERSION"

          # 缓存路径
          mkdir -p edgedriver_cache
          DRIVER_ZIP="edgedriver_cache/edgedriver_${EDGE_FULL_VERSION}.zip"
          DRIVER_BIN="edgedriver_cache/msedgedriver"

          if [ -f "$DRIVER_BIN" ]; then
            echo "Using cached WebDriver."
            sudo cp "$DRIVER_BIN" /usr/local/bin/msedgedriver
            sudo chmod +x /usr/local/bin/msedgedriver
          else
            echo "No cached WebDriver. Downloading..."
            VERSION_PATTERNS=(
              "$EDGE_FULL_VERSION"
              "${EDGE_FULL_VERSION%.*}"
              "${EDGE_FULL_VERSION%.*.*}"
            )
            for VERSION in "${VERSION_PATTERNS[@]}"; do
              echo "Trying WebDriver version: $VERSION"
              if wget -q --tries=3 --timeout=30 "$EDGE_DRIVER_URL/$VERSION/edgedriver_linux64.zip" -O "$DRIVER_ZIP"; then
                if unzip -tq "$DRIVER_ZIP" >/dev/null 2>&1; then
                  unzip -q -o "$DRIVER_ZIP" -d edgedriver_cache
                  cp edgedriver_cache/msedgedriver /usr/local/bin/
                  chmod +x /usr/local/bin/msedgedriver
                  break
                else
                  echo "Corrupted zip, retrying..."
                  rm -f "$DRIVER_ZIP"
                fi
              fi
            done

            if ! command -v msedgedriver >/dev/null; then
              echo "::error::WebDriver installation failed"
              exit 1
            fi
          fi

          DRIVER_VERSION=$(msedgedriver --version | awk '{print $2}')
          echo "WebDriver version: $DRIVER_VERSION"
          if [[ ! "$DRIVER_VERSION" =~ ^${EDGE_FULL_VERSION%.*} ]]; then
            echo "::warning::Version mismatch! Edge: $EDGE_FULL_VERSION | Driver: $DRIVER_VERSION"
          fi

      - name: Run crawler with monitoring
        env:
          MONGO_URI: ${{ secrets.MONGO_URI }}
          HEADLESS: "true"
          PYTHONPATH: "${{ github.workspace }}"
        run: |
          mkdir -p logs
          LOG_FILE="logs/crawler_$(date +'%Y%m%d_%H%M%S').log"
          START_TIME=$(date +%s)
          timeout 25m python -u news_crawler.py 2>&1 | tee $LOG_FILE
          EXIT_CODE=${PIPESTATUS[0]}
          END_TIME=$(date +%s)
          DURATION=$((END_TIME - START_TIME))

          echo "=== Crawler Finished ==="
          echo "Exit code: $EXIT_CODE"
          echo "Duration: ${DURATION}s"

          if [ $EXIT_CODE -eq 124 ]; then
            echo "::error::Crawler timed out after 25 minutes"
            exit 1
          elif [ $EXIT_CODE -ne 0 ]; then
            echo "::group::Error Details (last 100 lines)"
            tail -n 100 $LOG_FILE
            echo "::endgroup::"
            echo "::error::Crawler failed with exit code $EXIT_CODE"
            exit $EXIT_CODE
          fi

          echo "::notice::Crawler completed successfully in ${DURATION}s"
          echo "duration=$DURATION" >> $GITHUB_OUTPUT

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: crawler-artifacts-${{ github.run_id }}-${{ github.run_attempt }}
          path: |
            logs/
            !*.tmp
          retention-days: 7
          compression-level: 9

      - name: Notify Slack on failure
        if: failure()
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": "百度热榜爬虫运行失败",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": ":x: *百度热榜爬虫运行失败* \n*工作流*: ${{ github.workflow }} \n*运行ID*: ${{ github.run_id }} \n*分支*: ${{ github.ref }}"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "查看详情: <https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|GitHub Actions>"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
